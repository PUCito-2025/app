generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Semester {
  id           Int      @id @default(autoincrement())
  semesterDate DateTime
  userId       Int
  courses      Course[] @relation("SemesterCourses")
}

model Course {
  id          Int          @id @default(autoincrement())
  code        String
  name        String
  semesterId  Int
  assignments Assignment[] @relation("CourseAssignments")
  semester    Semester     @relation("SemesterCourses", fields: [semesterId], references: [id])
  studyPlans  StudyPlan[]  @relation("CourseStudyPlans")
}

model Assignment {
  id            Int            @id @default(autoincrement())
  title         String
  dueDate       DateTime
  courseId      Int
  course        Course         @relation("CourseAssignments", fields: [courseId], references: [id])
  notifications Notification[] @relation("AssignmentNotifications")
}

model StudyPlan {
  id               Int            @id @default(autoincrement())
  studiedHours     Int
  recommendedHours Int
  planDate         DateTime
  userId           String
  courseId         Int
  notifications    Notification[] @relation("StudyPlanNotifications")
  course           Course         @relation("CourseStudyPlans", fields: [courseId], references: [id])
}

model Notification {
  id              Int                 @id @default(autoincrement())
  type            NotificationType
  title           String
  message         String
  isRead          Boolean             @default(false)
  userId          String
  assignmentId    Int?
  studyPlanId     Int?
  status          NotificationStatus  @default(PENDING)
  deliveryType    DeliveryType        @default(EMAIL)
  sentAt          DateTime?
  failedAt        DateTime?
  retryCount      Int                 @default(0)
  maxRetries      Int                 @default(3)
  errorMessage    String?
  metadata        Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  assignment      Assignment?         @relation("AssignmentNotifications", fields: [assignmentId], references: [id])
  studyPlan       StudyPlan?          @relation("StudyPlanNotifications", fields: [studyPlanId], references: [id])

  @@index([userId, isRead])
  @@index([status])
  @@index([type, createdAt])
}

enum NotificationType {
  STUDY_PLAN
  ASSIGNMENT
  REMINDER
  DEADLINE_WARNING
  COURSE_UPDATE
  SYSTEM
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}

enum DeliveryType {
  EMAIL
  IN_APP
}
